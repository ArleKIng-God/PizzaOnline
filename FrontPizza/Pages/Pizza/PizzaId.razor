@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject Data.PizzaService pizzaService
@inject Data.IngrefientsService ingredientService
@using FrontPizza.ViewModels;
@page "/pizza/{id}"
@inject IStringLocalizer<PizzaId> L

@if (pizza == null)
{
    <p>"@L["Downloads"]..."</p>
}
else
{
    <body>
        <div class="name">@pizza.namePizza</div>
        <div class="tools">
            <div class="imgP"><img src="@pizza.image"></div>        
            <div class="dataP">
                <div class="data" style="font-size: 15pt;	">@L["Price"]:</div>
                <div class="price">@pizza.price $</div>
                <br><br>
                <div class="data">
                    @L["Ingradients"]:
                    <br />
                    @L["Dough"]: @ingradients.dough<br />
                    @L["Tomate"]: @ingradients.tomate<br />
                    @L["Meet"]: @ingradients.meet<br />
                    @L["Cheese"]: @ingradients.cheese<br />
                    @L["Sous"]: @ingradients.sous<br />
                    @L["Additionally"]: @ingradients.additionally<br>
                    @L["Size"]: @pizza.size
                </div>
                <br><br>
            </div>
            <div class="button">
                <button class="btn btn-primary">@L["Order"]</button>
            </div>
            <br>
        </div>
    </body>

    <style>
        body {
            background: url(pizza_images/background.png) no-repeat fixed;
        }

        .button {
            margin-top: -15%;
            margin-left: 3%;
        }

        .name {
            font-family: URW Chancery L, cursive;
            font-size: 18pt;
            text-shadow: 2px 2px 10px #757575;
            width: 300px;
            margin-top: 3%;
            margin-left: 1%;
            clear: both;
        }

        .data {
            font-family: URW Chancery L, cursive;
            margin-top: 3%;
            width: 250px;
            font-size: 12pt;
            margin-left: 50px;
            clear: both;
        }

        .dataP {
            display: flex;
            flex-direction: column;
        }

        .map {
            margin-top: 3%;
            overflow: hidden;
            width: 375px;
            margin-left: 3%;
        }

        .imgP img {
            float: left;
            margin-top: 20px;
            margin-left: 2%;
            cursor: pointer;
            transition: 0.3s linear;
        }

            .imgP img:hover {
                -webkit-transform: scale(1.1);
                transform: scale(1.1);
            }

        .price {
            background-color: #0094ff;
            width: 135px;
            height: 6%;
            margin-left: 6%;
            margin-top: 4%;
            padding: 5px;
            text-align: center;
            font-family: URW Chancery L, cursive;
        }
    </style>
}

@code {
    public string СustomerId { get; set; } = "";
    PizzaViewModel pizza;
    IngradientsViewModel ingradients;
    string image;
    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {        
        pizza = await pizzaService.GetPizzaById(Convert.ToInt32(Id));
        image = pizza.image;
        ingradients = await ingredientService.GetByIdIngredients(pizza.ingredientsId);
    }    
}
