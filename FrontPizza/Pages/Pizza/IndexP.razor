@page "/pizza"
@using FrontPizza.ViewModels;
@using PizzaOnline.DAL.Models;
@using Microsoft.AspNetCore.Authorization
@using FrontPizza.Validation
@inject IStringLocalizer<IndexP> L
@attribute [Authorize]
@inject Data.PizzaService pizzaService

<h3>@L["Pizza"]</h3>
<div class="button2" style="display:block;">
    <a class="btn btn-primary" href="/">@L["Home"]</a>
    <AuthorizeView Roles="admin">
        <Authorized>
            <a class="btn btn-primary" href="pizza/add">@L["Add pizza"]</a>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>
</div>

<div class="search">
    <p style="margin: 0">Search :</p>
    <input type="text" @bind="inpNamePizza" placeholder="@L["Search"]..." />
    <button @onclick="Search" class="btn btn-sm btn-primary">@L["Search"]</button>
</div>
<br />
<div class="page">
    <MatPaginator Length="@elementCount" PageSize="@pageSize" Page="@OnPage"></MatPaginator>
</div>
<br />

<div class="orderby">
    <MatSelectItem @bind-Value="@orderBy" Items="@orderByArray"></MatSelectItem>
</div>
<br />

<div class="price">

    <div style="width: auto;  padding: 0">
        <p style="margin: 0">@L["Price"] :</p>
        <input type="number" min="0" max="@Decimal.MaxValue" step="0.01" @bind="minPrice" placeholder="Min price" />
        -
        <input type="number" min="0" max="@Decimal.MaxValue" step="0.01" @bind="maxPrice" placeholder="Max price" />
    </div>
    <br />
</div>

@if (pizza == null)
{
    <p><em>@L["Loading"]...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@L["NamePizza"]</th>
                <th>@L["Size"]</th>
                <th>@L["Price"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pizz in pizza)
            {
                <tr onclick='location.href="pizza/@pizz.id"' class="black">
                    <td>@pizz.namePizza</td>
                    <td>@pizz.size см</td>
                    <td>@pizz.price.ToString() $</td>
                    <td><img src="@pizz.image"></td>
                </tr>
            }
        </tbody>
    </table>
    @*<button @onclick="PrevPage">Prev</button>
        <span>@pageNum</span>
        <button @onclick="NextPage">Next</button>*@

}

<style>
    .black {
        color: black;
        text-decoration: none;
    }
    .search {
        margin-top: -7%;
        margin-left: 81%;
        width: auto;
        padding: 0
    }
    .page {
        margin-right: 71%;
        margin-top: 6%;
        margin-bottom: -16%
    }
    .price {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        width: 100%;
        padding: 0;
    }
    .orderby {
        display: flex;
        justify-content: flex-end;
    }
</style>

@code {
    //public PizzaViewModel pizzaViewModels = new PizzaViewModel();
    //public List<PizzaViewModel> pizza;
    //string orderBy;
    //int elementCount = 0;

    //string[] orderByArray = new[]
    //       {
    //            "Price",
    //            "Price desc",
    //            "Brand",
    //            "Brand desc"
    //        };

    //private int pageNum = 1;
    //private int pageSize = 2;
    //protected override async Task OnInitializedAsync()
    //{
    //    pizzaViewModels = new PizzaViewModel();
    //    pizza = await pizzaService.GetPizzaAsync(new PizzaQueryParameters { PageSize = pageSize, PageNumber = pageNum });
    //}
    //public async Task NextPage()
    //{
    //    pageNum++;
    //    pizza = await pizzaService.GetPizzaAsync(new PizzaQueryParameters { PageNumber = pageNum, PageSize = pageSize });
    //}
    //public async Task PrevPage()
    //{
    //    if (pageNum > 1)
    //    {
    //        pageNum--;
    //        pizza = await pizzaService.GetPizzaAsync(new PizzaQueryParameters { PageNumber = pageNum, PageSize = pageSize });
    //    }
    //}
    int pageSize = 25;
    int pageIndex = 0;

    int elementCount = 0;

    string orderBy;
    string inpNamePizza;

    string[] orderByArray = new[]
        {
                "Price",
                "NamePizza"
        };

    decimal minPrice = 0;
    decimal maxPrice = 1000;



    List<PizzaViewModel> pizza;

    protected override async Task OnInitializedAsync()
    {
        PizzaQueryParameters parameters = new PizzaQueryParameters
        {
            PageNumber = pageIndex + 1,
            PageSize = pageSize,
            MaxPrice = 1000,
            MinPrice = 0
        };
        pizza = await pizzaService.GetPizzaAsync(parameters);
        elementCount = await pizzaService.GetPizzaCountAsync(parameters);
    }

    protected async Task OnPage(MatPaginatorPageEvent e)
    {
        pizza = await pizzaService.GetPizzaAsync(new PizzaQueryParameters
        {
            PageNumber = e.PageIndex + 1,
            PageSize = e.PageSize,
            NamePizza = inpNamePizza,
            MinPrice = minPrice,
            MaxPrice = maxPrice,
            OrderBy = orderBy
        });
        pageSize = e.PageSize;
        pageIndex = e.PageIndex;
    }

    protected async Task Search()
    {
        PizzaQueryParameters parameters = new PizzaQueryParameters
        {
            PageNumber = pageIndex + 1,
            PageSize = pageSize,
            NamePizza = inpNamePizza,
            MinPrice = minPrice,
            MaxPrice = maxPrice,
            OrderBy = orderBy
        };
        pizza = await pizzaService.GetPizzaAsync(parameters);
        elementCount = await pizzaService.GetPizzaCountAsync(parameters);
    }
}
